CS333 - Project 1 - README
Tamsin Rogers
09/23/2021

Directory Layout:
proj01/
|
|__/C/
   |
   |__/task1.c
   |__/task2.c
   |__/task3.c
   |__/task4.c
   |__/task5.c
   |__/bus.c
   |__/float.c


Run and build configuration for C:
macOS Big Sur 11.5.2 - Apple LLVM version 12.0.5 (clang-1205.0.22.11)

Description for each subsection:
C:
	This is the C programming task. The task1.c, task2.c, task3.c, etc. files meet the 
	specifications of task 1, task 2, task 3, etc.  
  
  Compile:
		gcc -o task1 task1.c
  Run:
		./task1
  Output:
		address of char c: each byte of char c:
		0: 61
		address of short int s: 0x7ffee568f9fc 
		each byte of short int s:
		0: 60
		1: EA
		address of int i: 0x7ffee568f9f8 
		each byte of int i:
		0: 00
		1: 00
		2: 00
		3: 00
		address of long int l: 0x7ffee568f9f0 
		each byte of long int l:
		0: 00
		1: 00
		2: BC
		3: 93
		4: E9
		5: FE
		6: 24
		7: 61
		address of float f: 0x7ffee568f9ec 
		each byte of float f:
		0: 00
		1: 00
		2: 00
		3: 3F
		address of double d: 0x7ffee568f9e0 
		each byte of double d:
		0: ED
		1: 0D
		2: BE
		3: 30
		4: 99
		5: AA
		6: 0A
		7: 40

	Compile:
		gcc -o task2 task2.c
  	Run:
		./task2
  	Output:
  		address of char c: 0x7ffee4fd29ff 
		how much memory can we access?
		first 100 bytes:
		0: 61
		1: 38
		2: 2A
		3: FD
		4: E4
		5: FE
		6: 7F
		7: 00
		8: 00
		9: 01
		10: 00
		11: 00
		12: 00
		13: 00
		14: 00
		15: 00
		16: 00
		17: 28
		18: 2A
		19: FD
		20: E4
		21: FE
		22: 7F
		23: 00
		24: 00
		25: 3D
		26: 1F
		27: 33
		28: 20
		29: FF
		30: 7F
		31: 00
		32: 00
		33: 3D
		34: 1F
		35: 33
		36: 20
		37: FF
		38: 7F
		39: 00
		40: 00
		41: 00
		42: 00
		43: 00
		44: 00
		45: 00
		46: 00
		47: 00
		48: 00
		49: 01
		50: 00
		51: 00
		52: 00
		53: 00
		54: 00
		55: 00
		56: 00
		57: 50
		58: 2B
		59: FD
		60: E4
		61: FE
		62: 7F
		63: 00
		64: 00
		65: 00
		66: 00
		67: 00
		68: 00
		69: 00
		70: 00
		71: 00
		72: 00
		73: 58
		74: 2B
		75: FD
		76: E4
		77: FE
		78: 7F
		79: 00
		80: 00
		81: 74
		82: 2B
		83: FD
		84: E4
		85: FE
		86: 7F
		87: 00
		88: 00
		89: 84
		90: 2B
		91: FD
		92: E4
		93: FE
		94: 7F
		95: 00
		96: 00
		97: 98
		98: 2B
		99: FD
		first ??? bytes:
		1: 38
		2: 2A
		3: FD
		4: E4
		5: FE
		6: 7F
		7: 00
		8: 00
		9: 01
		10: 00
		11: 00
		12: 00
		13: 00
		14: 00
		15: 00
		16: 00
		17: 28
		18: 2A
		19: FD
		20: E4
		21: FE
		22: 7F
		23: 00
		24: 00
		25: 3D
		26: 1F
		27: 33
		28: 20
		29: FF
		30: 7F
		31: 00
		32: 00
		33: 3D
		34: 1F
		35: 33
		36: 20
		37: FF
		38: 7F
		39: 00
		40: 00
		41: 00
		42: 00
		43: 00
		44: 00
		45: 00
		46: 00
		47: 00
		48: 00
		49: 01
		50: 00
		51: 00
		52: 00
		53: 00
		54: 00
		55: 00
		56: 00
		57: 50
		58: 2B
		59: FD
		60: E4
		61: FE
		62: 7F
		63: 00
		64: 00
		65: 00
		66: 00
		67: 00
		68: 00
		69: 00
		70: 00
		71: 00
		72: 00
		73: 58
		74: 2B
		75: FD
		76: E4
		77: FE
		78: 7F
		79: 00
		80: 00
		81: 74
		82: 2B
		83: FD
		84: E4
		85: FE
		86: 7F
		87: 00
		88: 00
		89: 84
		90: 2B
		91: FD
		92: E4
		93: FE
		94: 7F
		95: 00
		96: 00
		97: 98
		98: 2B
		99: FD
		100: E4
		101: FE
		102: 7F
		103: 00
		104: 00
		105: D1
		106: 2B
		107: FD
		108: E4
		109: FE
		110: 7F
		111: 00
		112: 00
		113: EA
		114: 2B
		115: FD
		116: E4
		117: FE
		118: 7F
		119: 00
		120: 00
		121: 05
		122: 2C
		123: FD
		124: E4
		125: FE
		126: 7F
		127: 00
		128: 00
		129: 3A
		130: 2C
		131: FD
		132: E4
		133: FE
		134: 7F
		135: 00
		136: 00
		137: 4C
		138: 2C
		139: FD
		140: E4
		141: FE
		142: 7F
		143: 00
		144: 00
		145: 8E
		146: 2C
		147: FD
		148: E4
		149: FE
		150: 7F
		151: 00
		152: 00
		153: 11
		154: 2E
		155: FD
		156: E4
		157: FE
		158: 7F
		159: 00
		160: 00
		161: 39
		162: 2E
		163: FD
		164: E4
		165: FE
		166: 7F
		167: 00
		168: 00
		169: 68
		170: 2E
		171: FD
		172: E4
		173: FE
		174: 7F
		175: 00
		176: 00
		177: C0
		178: 59
		179: D0
		180: 0D
		181: BC
		182: 7F
		183: 00
		184: 00
		185: 87
		186: 2E
		187: FD
		188: E4
		189: FE
		190: 7F
		191: 00
		192: 00
		193: 9A
		194: 2E
		195: FD
		196: E4
		197: FE
		198: 7F
		199: 00
		200: 00
		201: A2
		202: 2E
		203: FD
		204: E4
		205: FE
		206: 7F
		207: 00
		208: 00
		209: BB
		210: 2E
		211: FD
		212: E4
		213: FE
		214: 7F
		215: 00
		216: 00
		217: D0
		218: 2E
		219: FD
		220: E4
		221: FE
		222: 7F
		223: 00
		224: 00
		225: 00
		226: 00
		227: 00
		228: 00
		229: 00
		230: 00
		231: 00
		232: 00
		233: 38
		234: 2B
		235: FD
		236: E4
		237: FE
		238: 7F
		239: 00
		240: 00
		241: E0
		242: 2E
		243: FD
		244: E4
		245: FE
		246: 7F
		247: 00
		248: 00
		249: F3
		250: 2E
		251: FD
		252: E4
		253: FE
		254: 7F
		255: 00
		256: 00
		257: 12
		258: 2F
		259: FD
		260: E4
		261: FE
		262: 7F
		263: 00
		264: 00
		265: 47
		266: 2F
		267: FD
		268: E4
		269: FE
		270: 7F
		271: 00
		272: 00
		273: 64
		274: 2F
		275: FD
		276: E4
		277: FE
		278: 7F
		279: 00
		280: 00
		281: A0
		282: 2F
		283: FD
		284: E4
		285: FE
		286: 7F
		287: 00
		288: 00
		289: C7
		290: 2F
		291: FD
		292: E4
		293: FE
		294: 7F
		295: 00
		296: 00
		297: F0
		298: 2F
		299: FD
		300: E4
		301: FE
		302: 7F
		303: 00
		304: 00
		305: 00
		306: 00
		307: 00
		308: 00
		309: 00
		310: 00
		311: 00
		312: 00
		313: 65
		314: 78
		315: 65
		316: 63
		317: 75
		318: 74
		319: 61
		320: 62
		321: 6C
		322: 65
		323: 5F
		324: 70
		325: 61
		326: 74
		327: 68
		328: 3D
		329: 2E
		330: 2F
		331: 74
		332: 61
		333: 73
		334: 6B
		335: 32
		336: 00
		337: 2E
		338: 2F
		339: 74
		340: 61
		341: 73
		342: 6B
		343: 32
		344: 00
		345: 54
		346: 45
		347: 52
		348: 4D
		349: 5F
		350: 50
		351: 52
		352: 4F
		353: 47
		354: 52
		355: 41
		356: 4D
		357: 3D
		358: 41
		359: 70
		360: 70
		361: 6C
		362: 65
		363: 5F
		364: 54
		365: 65
		366: 72
		367: 6D
		368: 69
		369: 6E
		370: 61
		371: 6C
		372: 00
		373: 53
		374: 48
		375: 45
		376: 4C
		377: 4C
		378: 3D
		379: 2F
		380: 62
		381: 69
		382: 6E
		383: 2F
		384: 62
		385: 61
		386: 73
		387: 68
		388: 00
		389: 54
		390: 45
		391: 52
		392: 4D
		393: 3D
		394: 78
		395: 74
		396: 65
		397: 72
		398: 6D
		399: 2D
		400: 32
		401: 35
		402: 36
		403: 63
		404: 6F
		405: 6C
		406: 6F
		407: 72
		408: 00
		409: 54
		410: 4D
		411: 50
		412: 44
		413: 49
		414: 52
		415: 3D
		416: 2F
		417: 76
		418: 61
		419: 72
		420: 2F
		421: 66
		422: 6F
		423: 6C
		424: 64
		425: 65
		426: 72
		427: 73
		428: 2F
		429: 78
		430: 66
		431: 2F
		432: 30
		433: 79
		434: 6A
		435: 6A
		436: 77
		437: 74
		438: 76
		439: 6A
		440: 36
		441: 78
		442: 67
		443: 67
		444: 5F
		445: 32
		446: 63
		447: 64
		448: 64
		449: 66
		450: 31
		451: 37
		452: 66
		453: 38
		454: 66
		455: 34
		456: 30
		457: 30
		458: 30
		459: 30
		460: 67
		461: 6E
		462: 2F
		463: 54
		464: 2F
		465: 00
		466: 54
		467: 45
		468: 52
		469: 4D
		470: 5F
		471: 50
		472: 52
		473: 4F
		474: 47
		475: 52
		476: 41
		477: 4D
		478: 5F
		479: 56
		480: 45
		481: 52
		482: 53
		483: 49
		484: 4F
		485: 4E
		486: 3D
		487: 34
		488: 34
		489: 30
		490: 00
		491: 4F
		492: 4C
		493: 44
		494: 50
		495: 57
		496: 44
		497: 3D
		498: 2F
		499: 55
		500: 73
		501: 65
		502: 72
		503: 73
		504: 2F
		505: 74
		506: 61
		507: 6D
		508: 73
		509: 69
		510: 6E
		511: 72
		512: 6F
		513: 67
		514: 65
		515: 72
		516: 73
		517: 00
		518: 54
		519: 45
		520: 52
		521: 4D
		522: 5F
		523: 53
		524: 45
		525: 53
		526: 53
		527: 49
		528: 4F
		529: 4E
		530: 5F
		531: 49
		532: 44
		533: 3D
		534: 42
		535: 45
		536: 30
		537: 41
		538: 37
		539: 34
		540: 32
		541: 35
		542: 2D
		543: 42
		544: 37
		545: 43
		546: 32
		547: 2D
		548: 34
		549: 46
		550: 41
		551: 35
		552: 2D
		553: 38
		554: 33
		555: 41
		556: 45
		557: 2D
		558: 38
		559: 36
		560: 30
		561: 30
		562: 44
		563: 45
		564: 35
		565: 30
		566: 30
		567: 43
		568: 45
		569: 34
		570: 00
		571: 55
		572: 53
		573: 45
		574: 52
		575: 3D
		576: 74
		577: 61
		578: 6D
		579: 73
		580: 69
		581: 6E
		582: 72
		583: 6F
		584: 67
		585: 65
		586: 72
		587: 73
		588: 00
		589: 53
		590: 53
		591: 48
		592: 5F
		593: 41
		594: 55
		595: 54
		596: 48
		597: 5F
		598: 53
		599: 4F
		600: 43
		601: 4B
		602: 3D
		603: 2F
		604: 70
		605: 72
		606: 69
		607: 76
		608: 61
		609: 74
		610: 65
		611: 2F
		612: 74
		613: 6D
		614: 70
		615: 2F
		616: 63
		617: 6F
		618: 6D
		619: 2E
		620: 61
		621: 70
		622: 70
		623: 6C
		624: 65
		625: 2E
		626: 6C
		627: 61
		628: 75
		629: 6E
		630: 63
		631: 68
		632: 64
		633: 2E
		634: 30
		635: 55
		636: 69
		637: 4D
		638: 4D
		639: 42
		640: 56
		641: 73
		642: 42
		643: 6F
		644: 2F
		645: 4C
		646: 69
		647: 73
		648: 74
		649: 65
		650: 6E
		651: 65
		652: 72
		653: 73
		654: 00
		655: 50
		656: 41
		657: 54
		658: 48
		659: 3D
		660: 2F
		661: 4C
		662: 69
		663: 62
		664: 72
		665: 61
		666: 72
		667: 79
		668: 2F
		669: 46
		670: 72
		671: 61
		672: 6D
		673: 65
		674: 77
		675: 6F
		676: 72
		677: 6B
		678: 73
		679: 2F
		680: 50
		681: 79
		682: 74
		683: 68
		684: 6F
		685: 6E
		686: 2E
		687: 66
		688: 72
		689: 61
		690: 6D
		691: 65
		692: 77
		693: 6F
		694: 72
		695: 6B
		696: 2F
		697: 56
		698: 65
		699: 72
		700: 73
		701: 69
		702: 6F
		703: 6E
		704: 73
		705: 2F
		706: 33
		707: 2E
		708: 39
		709: 2F
		710: 62
		711: 69
		712: 6E
		713: 3A
		714: 2F
		715: 4C
		716: 69
		717: 62
		718: 72
		719: 61
		720: 72
		721: 79
		722: 2F
		723: 46
		724: 72
		725: 61
		726: 6D
		727: 65
		728: 77
		729: 6F
		730: 72
		731: 6B
		732: 73
		733: 2F
		734: 50
		735: 79
		736: 74
		737: 68
		738: 6F
		739: 6E
		740: 2E
		741: 66
		742: 72
		743: 61
		744: 6D
		745: 65
		746: 77
		747: 6F
		748: 72
		749: 6B
		750: 2F
		751: 56
		752: 65
		753: 72
		754: 73
		755: 69
		756: 6F
		757: 6E
		758: 73
		759: 2F
		760: 33
		761: 2E
		762: 38
		763: 2F
		764: 62
		765: 69
		766: 6E
		767: 3A
		768: 2F
		769: 4C
		770: 69
		771: 62
		772: 72
		773: 61
		774: 72
		775: 79
		776: 2F
		777: 46
		778: 72
		779: 61
		780: 6D
		781: 65
		782: 77
		783: 6F
		784: 72
		785: 6B
		786: 73
		787: 2F
		788: 50
		789: 79
		790: 74
		791: 68
		792: 6F
		793: 6E
		794: 2E
		795: 66
		796: 72
		797: 61
		798: 6D
		799: 65
		800: 77
		801: 6F
		802: 72
		803: 6B
		804: 2F
		805: 56
		806: 65
		807: 72
		808: 73
		809: 69
		810: 6F
		811: 6E
		812: 73
		813: 2F
		814: 33
		815: 2E
		816: 37
		817: 2F
		818: 62
		819: 69
		820: 6E
		821: 3A
		822: 2F
		823: 4C
		824: 69
		825: 62
		826: 72
		827: 61
		828: 72
		829: 79
		830: 2F
		831: 46
		832: 72
		833: 61
		834: 6D
		835: 65
		836: 77
		837: 6F
		838: 72
		839: 6B
		840: 73
		841: 2F
		842: 50
		843: 79
		844: 74
		845: 68
		846: 6F
		847: 6E
		848: 2E
		849: 66
		850: 72
		851: 61
		852: 6D
		853: 65
		854: 77
		855: 6F
		856: 72
		857: 6B
		858: 2F
		859: 56
		860: 65
		861: 72
		862: 73
		863: 69
		864: 6F
		865: 6E
		866: 73
		867: 2F
		868: 33
		869: 2E
		870: 37
		871: 2F
		872: 62
		873: 69
		874: 6E
		875: 3A
		876: 2F
		877: 75
		878: 73
		879: 72
		880: 2F
		881: 6C
		882: 6F
		883: 63
		884: 61
		885: 6C
		886: 2F
		887: 62
		888: 69
		889: 6E
		890: 3A
		891: 2F
		892: 75
		893: 73
		894: 72
		895: 2F
		896: 62
		897: 69
		898: 6E
		899: 3A
		900: 2F
		901: 62
		902: 69
		903: 6E
		904: 3A
		905: 2F
		906: 75
		907: 73
		908: 72
		909: 2F
		910: 73
		911: 62
		912: 69
		913: 6E
		914: 3A
		915: 2F
		916: 73
		917: 62
		918: 69
		919: 6E
		920: 3A
		921: 2F
		922: 4C
		923: 69
		924: 62
		925: 72
		926: 61
		927: 72
		928: 79
		929: 2F
		930: 54
		931: 65
		932: 58
		933: 2F
		934: 74
		935: 65
		936: 78
		937: 62
		938: 69
		939: 6E
		940: 3A
		941: 2F
		942: 75
		943: 73
		944: 72
		945: 2F
		946: 6C
		947: 6F
		948: 63
		949: 61
		950: 6C
		951: 2F
		952: 73
		953: 68
		954: 61
		955: 72
		956: 65
		957: 2F
		958: 64
		959: 6F
		960: 74
		961: 6E
		962: 65
		963: 74
		964: 3A
		965: 7E
		966: 2F
		967: 2E
		968: 64
		969: 6F
		970: 74
		971: 6E
		972: 65
		973: 74
		974: 2F
		975: 74
		976: 6F
		977: 6F
		978: 6C
		979: 73
		980: 3A
		981: 2F
		982: 4C
		983: 69
		984: 62
		985: 72
		986: 61
		987: 72
		988: 79
		989: 2F
		990: 46
		991: 72
		992: 61
		993: 6D
		994: 65
		995: 77
		996: 6F
		997: 72
		998: 6B
		999: 73
		1000: 2F
		1001: 4D
		1002: 6F
		1003: 6E
		1004: 6F
		1005: 2E
		1006: 66
		1007: 72
		1008: 61
		1009: 6D
		1010: 65
		1011: 77
		1012: 6F
		1013: 72
		1014: 6B
		1015: 2F
		1016: 56
		1017: 65
		1018: 72
		1019: 73
		1020: 69
		1021: 6F
		1022: 6E
		1023: 73
		1024: 2F
		1025: 43
		1026: 75
		1027: 72
		1028: 72
		1029: 65
		1030: 6E
		1031: 74
		1032: 2F
		1033: 43
		1034: 6F
		1035: 6D
		1036: 6D
		1037: 61
		1038: 6E
		1039: 64
		1040: 73
		1041: 00
		1042: 5F
		1043: 5F
		1044: 43
		1045: 46
		1046: 42
		1047: 75
		1048: 6E
		1049: 64
		1050: 6C
		1051: 65
		1052: 49
		1053: 64
		1054: 65
		1055: 6E
		1056: 74
		1057: 69
		1058: 66
		1059: 69
		1060: 65
		1061: 72
		1062: 3D
		1063: 63
		1064: 6F
		1065: 6D
		1066: 2E
		1067: 61
		1068: 70
		1069: 70
		1070: 6C
		1071: 65
		1072: 2E
		1073: 54
		1074: 65
		1075: 72
		1076: 6D
		1077: 69
		1078: 6E
		1079: 61
		1080: 6C
		1081: 00
		1082: 50
		1083: 57
		1084: 44
		1085: 3D
		1086: 2F
		1087: 55
		1088: 73
		1089: 65
		1090: 72
		1091: 73
		1092: 2F
		1093: 74
		1094: 61
		1095: 6D
		1096: 73
		1097: 69
		1098: 6E
		1099: 72
		1100: 6F
		1101: 67
		1102: 65
		1103: 72
		1104: 73
		1105: 2F
		1106: 44
		1107: 65
		1108: 73
		1109: 6B
		1110: 74
		1111: 6F
		1112: 70
		1113: 2F
		1114: 43
		1115: 53
		1116: 33
		1117: 33
		1118: 33
		1119: 2F
		1120: 70
		1121: 72
		1122: 6F
		1123: 6A
		1124: 65
		1125: 63
		1126: 74
		1127: 31
		1128: 00
		1129: 4C
		1130: 41
		1131: 4E
		1132: 47
		1133: 3D
		1134: 65
		1135: 6E
		1136: 5F
		1137: 55
		1138: 53
		1139: 2E
		1140: 55
		1141: 54
		1142: 46
		1143: 2D
		1144: 38
		1145: 00
		1146: 58
		1147: 50
		1148: 43
		1149: 5F
		1150: 46
		1151: 4C
		1152: 41
		1153: 47
		1154: 53
		1155: 3D
		1156: 30
		1157: 78
		1158: 30
		1159: 00
		1160: 58
		1161: 50
		1162: 43
		1163: 5F
		1164: 53
		1165: 45
		1166: 52
		1167: 56
		1168: 49
		1169: 43
		1170: 45
		1171: 5F
		1172: 4E
		1173: 41
		1174: 4D
		1175: 45
		1176: 3D
		1177: 30
		1178: 00
		1179: 53
		1180: 48
		1181: 4C
		1182: 56
		1183: 4C
		1184: 3D
		1185: 31
		1186: 00
		1187: 48
		1188: 4F
		1189: 4D
		1190: 45
		1191: 3D
		1192: 2F
		1193: 55
		1194: 73
		1195: 65
		1196: 72
		1197: 73
		1198: 2F
		1199: 74
		1200: 61
		1201: 6D
		1202: 73
		1203: 69
		1204: 6E
		1205: 72
		1206: 6F
		1207: 67
		1208: 65
		1209: 72
		1210: 73
		1211: 00
		1212: 4C
		1213: 4F
		1214: 47
		1215: 4E
		1216: 41
		1217: 4D
		1218: 45
		1219: 3D
		1220: 74
		1221: 61
		1222: 6D
		1223: 73
		1224: 69
		1225: 6E
		1226: 72
		1227: 6F
		1228: 67
		1229: 65
		1230: 72
		1231: 73
		1232: 00
		1233: 5F
		1234: 3D
		1235: 2E
		1236: 2F
		1237: 74
		1238: 61
		1239: 73
		1240: 6B
		1241: 32
		1242: 00
		1243: 00
		1244: 00
		1245: 00
		1246: 00
		1247: 00
		1248: 00
		1249: 00
		1250: 00
		1251: 00
		1252: 00
		1253: 00
		1254: 00
		1255: 00
		1256: 00
		1257: 00
		1258: 00
		1259: 00
		1260: 00
		1261: 00
		1262: 00
		1263: 00
		1264: 00
		1265: 00
		1266: 00
		1267: 00
		1268: 00
		1269: 00
		1270: 00
		1271: 00
		1272: 00
		1273: 00
		1274: 00
		1275: 00
		1276: 00
		1277: 00
		1278: 00
		1279: 00
		1280: 00
		1281: 00
		1282: 00
		1283: 00
		1284: 00
		1285: 00
		1286: 00
		1287: 00
		1288: 00
		1289: 00
		1290: 00
		1291: 00
		1292: 00
		1293: 00
		1294: 00
		1295: 00
		1296: 00
		1297: 00
		1298: 00
		1299: 00
		1300: 00
		1301: 00
		1302: 00
		1303: 00
		1304: 00
		1305: 00
		1306: 00
		1307: 00
		1308: 00
		1309: 00
		1310: 00
		1311: 00
		1312: 00
		1313: 00
		1314: 00
		1315: 00
		1316: 00
		1317: 00
		1318: 00
		1319: 00
		1320: 00
		1321: 00
		1322: 00
		1323: 00
		1324: 00
		1325: 00
		1326: 00
		1327: 00
		1328: 00
		1329: 00
		1330: 00
		1331: 00
		1332: 00
		1333: 00
		1334: 00
		1335: 00
		1336: 00
		1337: 00
		1338: 00
		1339: 00
		1340: 00
		1341: 00
		1342: 00
		1343: 00
		1344: 00
		1345: 00
		1346: 00
		1347: 00
		1348: 00
		1349: 00
		1350: 00
		1351: 00
		1352: 70
		1353: 74
		1354: 72
		1355: 5F
		1356: 6D
		1357: 75
		1358: 6E
		1359: 67
		1360: 65
		1361: 3D
		1362: 00
		1363: 00
		1364: 00
		1365: 00
		1366: 00
		1367: 00
		1368: 00
		1369: 00
		1370: 00
		1371: 00
		1372: 00
		1373: 00
		1374: 00
		1375: 00
		1376: 00
		1377: 00
		1378: 00
		1379: 00
		1380: 00
		1381: 6D
		1382: 61
		1383: 69
		1384: 6E
		1385: 5F
		1386: 73
		1387: 74
		1388: 61
		1389: 63
		1390: 6B
		1391: 3D
		1392: 00
		1393: 00
		1394: 00
		1395: 00
		1396: 00
		1397: 00
		1398: 00
		1399: 00
		1400: 00
		1401: 00
		1402: 00
		1403: 00
		1404: 00
		1405: 00
		1406: 00
		1407: 00
		1408: 00
		1409: 00
		1410: 00
		1411: 00
		1412: 00
		1413: 00
		1414: 00
		1415: 00
		1416: 00
		1417: 00
		1418: 00
		1419: 00
		1420: 00
		1421: 00
		1422: 00
		1423: 00
		1424: 00
		1425: 00
		1426: 00
		1427: 00
		1428: 00
		1429: 00
		1430: 00
		1431: 00
		1432: 00
		1433: 00
		1434: 00
		1435: 00
		1436: 00
		1437: 00
		1438: 00
		1439: 00
		1440: 00
		1441: 65
		1442: 78
		1443: 65
		1444: 63
		1445: 75
		1446: 74
		1447: 61
		1448: 62
		1449: 6C
		1450: 65
		1451: 5F
		1452: 66
		1453: 69
		1454: 6C
		1455: 65
		1456: 3D
		1457: 30
		1458: 78
		1459: 31
		1460: 61
		1461: 30
		1462: 31
		1463: 30
		1464: 30
		1465: 30
		1466: 30
		1467: 30
		1468: 37
		1469: 2C
		1470: 30
		1471: 78
		1472: 32
		1473: 34
		1474: 33
		1475: 66
		1476: 30
		1477: 37
		1478: 66
		1479: 00
		1480: 64
		1481: 79
		1482: 6C
		1483: 64
		1484: 5F
		1485: 66
		1486: 69
		1487: 6C
		1488: 65
		1489: 3D
		1490: 30
		1491: 78
		1492: 31
		1493: 61
		1494: 30
		1495: 31
		1496: 30
		1497: 30
		1498: 30
		1499: 30
		1500: 30
		1501: 37
		1502: 2C
		1503: 30
		1504: 78
		1505: 66
		1506: 66
		1507: 66
		1508: 66
		1509: 66
		1510: 66
		1511: 66
		1512: 30
		1513: 30
		1514: 30
		1515: 64
		1516: 38
		1517: 61
		1518: 32
		1519: 38
		1520: 00
		1521: 74
		1522: 68
		1523: 5F
		1524: 70
		1525: 6F
		1526: 72
		1527: 74
		1528: 3D
		1529: 00
		1530: 00
		1531: 00
		1532: 00
		1533: 00
		1534: 00
		1535: 00
		1536: 00
		Segmentation fault: 11
  	
  	Compile:
		gcc -o task3 task3.c
  	Run:
		./task3
  	Output:
  	
  	Compile:
		gcc -o task4 task4.c
  	Run:
		./task4
  	Output:
  		address of struct: 0x7ffeebf299f8 
		each byte of struct:
		0: 05
		1: 00
		2: 00
		3: 00
		4: E8
		5: 03
		6: 63
		7: 00
  	
  	Compile:
		gcc -o task5 task5.c
  	Run:
		./task5
  	Output:
  		Illegal instruction: 4
  	
  	task1:
  	task1.c shows how data is stored in memory.  The output of the program is the address
  	of each variable along with a loop showing the value stored within each byte in memory.
  	
  		1) Is the machine you are using a big-endian or little-endian machine?
			Big-endian orders data by storing the most significant value first, while 
			little-endian orders data by storing the least significant value first.  
			My machine is little-endian because it stores the value of most significance 
			at the end.

		2) How does the program output tell you?
			The program output reflect little-endian behavior because the value of most 
			significance (3F = float f) is stored last, meaning that the least significant 
			value is being stored first.  

  	task2:
  	task2.c analyzes how much memory can be accessed in C.  The output of the program is
  	the result of a loop with no end condition printing the value stored within each byte
  	in memory in the program.  The program ends in a segmentation error because the pointer
  	runs out of memory to point to.  
  	
  	1) What happens at the end of the process?
		At the end of the process, I get a segmentation fault error, meaning that the 
		program is trying to access a location in the memory that doesn’t exist.  
	
	2) Can you find the variables defined in your C program?
		Yes - depending on the number of bytes allocated to memory for each variable, we
		can pick out where they are being defined in the program.  For example, the integer
		5 just shows up as 5 in memory.  
  	

  	task3:
    task3.c constantly allocates memory in a loop and contains a free statement in that loop
    that opens up more memory to be used by the program.  There is no output in this program
    because it is a never-ending loop.  I used the top command to analyze my machine's memory
    usage for this task.  
    
    1) Briefly describe the memory requirements when using and not using the free statement.
		Without the free statement, more memory is required (about 162M+).  With the free 
		statement, less memory is required (about 373K).  This is made possible by the 
		inclusion of the free statement, which allocates previously used memory to new processes.  

	task4:
	task4.c sets up a struct with three different variables (int, short int, and char) and
	allocates memory to this struct, using an unsigned char * to analyze that memory.
	
	1) Does the sizeof result match your expectation?
		The sizeof result doesn’t entirely match my expectation.  I expected the loop to 
		run for the size of struct - which is 1 int (4 bytes) + 1 short (2 bytes) + 1 char 
		(1 byte) = 7 bytes, so I expected it to loop 7 times, but it loops 8 times.  
	2) Are there any gaps in the way the fields of the structure are laid out?
		There are no gaps between fields due to the way I assigned the variables - so int 
		a takes up the first 4 bytes, short int b takes up the next two bytes, and char c 
		takes up the seventh byte.  There is a gap at the end of the structure in the form 
		of an empty byte 0.

	task5:
	task5.c analyzes the strcpy function, which copies a string into a local character array 
	of fixed length.  In this program, str2 allocates a character array of size 5 for the 
	string (str1) to be copied into.  In this case, str1 has size 16, which is too big, so 
	strcpy (str2, str1) throws an error.

		
	Extensions:
    * I did some research on Python as a fourth language:
	Python is a high-level programming language designed to emphasize code readability 
	and object-oriented programming.  Python is mainly used for web development, and 
	data analysis and visualization practices.  Python was developed in 1991 and is an 
	interpreted language, meaning that it runs on an internal interpreter.  Python is 
	open source and available for free distribution.  
    
    
    * I wrote the shortest C file I could to generate a bus error.  A bus error is raised
    when it is not possible to access the location requested in memory.  This is due to
    misalignment with the CPU.
    
    The test file to showcase the functionality is named bus.
		
     Compile:
		 	gcc -o bus bus.c 
     Run:
		 	./bus
     Output:
     		Bus error: 10
     
     * I think that the floating point number in C to which you can add one and get back the
     same number is 340282346638528859811704183484516925440.000000, which is the value returned
     by FLT_MAX in C, which uses <float.h>.  This max value is equivalent to 3.402823466 E + 38, 
     and because only 4 bytes are allocated to floats, adding 1 to this value just gives the 
     same number back.  
     
     The test file to showcase the functionality is named float.
		
     Compile:
		 	gcc -o float float.c 
     Run:
		 	./float
     Output:
     		result = 340282346638528859811704183484516925440.000000
		 	


  


